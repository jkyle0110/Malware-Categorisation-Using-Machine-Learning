#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from binascii import *
import os
import math
import hashlib

class PE32():
    LOC_PE_SIG_OFFSET = "0x3c"
    PE_SIG_LENGTH = 4
    COFF_LENGTH = 20
    SECTION_HEADER_SIZE = 40
    
    opHeaderOffset = -1
    
    def __init__(self):
        self.file = None
        self.fileName = None
        
    def File(self,file,filename):
        self.file = file
        self.fileName = filename
    
    def GetFileName(self):
        return self.fileName
        
    def ReadBytes(self, parentOffset, offset, length):
        absolute_offset = parentOffset + offset
        _bytes = list();
        for i in range(length):
            _bytes.append(self.ReadByte(absolute_offset+i).decode())
        return _bytes
    
    def ReadBigEndianBytes(self, parentOffset, offset, length):
        _bytes = self.ReadBytes(parentOffset, offset, length)
        return ''.join(_bytes[::-1])  
    
    def ReadLittleEndianBytes(self, parentOffset, offset, length):
        _bytes = self.ReadBytes(parentOffset, offset, length)
        return ''.join(_bytes)  
        
    def ReadByte(self,offset):
        self.file.seek(offset)
        return hexlify(self.file.read(1))

    def HexToDec(self,hexString):
        return int(hexString, base=16)
    
    def GetPESigOffset(self):
        return self.ReadByte(self.HexToDec(self.LOC_PE_SIG_OFFSET))

    def GetOptionalHeaderOffset(self):
        return self.GetCOFFHeaderOffset() + self.COFF_LENGTH

    
    def GetSectionHeaderTableOffset(self):
        return self.GetOptionalHeaderOffset() + self.HexToDec(self.GetSizeOfOptionalHeader())
        
    def GetCOFFHeaderOffset(self):
        return self.HexToDec(self.GetPESigOffset()) + self.PE_SIG_LENGTH

    def GetFileLength(self):
        return os.path.getsize(self.GetFileName())
    
    def CalcSectionOffset(self,index):
        return self.SECTION_HEADER_SIZE*index
               
    def GetFileEntropy(self):
        return self.CalculateEntropy(0,self.GetFileLength())

        
    def GetImportName(self, startOffset, offset):
        rva = self.HexToDec(self.ReadBigEndianBytes(startOffset, offset, length = 4))
        start = rva
        count = 0
        while (self.ReadByte(rva) != b'00'):
                count+=1
                rva+=1
        return bytearray.fromhex(self.ReadLittleEndianBytes(start, offset = 0, length = count)).decode('ascii')
        
    def GetNumberOfImports(self):
        return int((self.HexToDec(self.GetImportTableSize())/20)-1)
        
    def GetCodeDataRatio(self):
        if self.HexToDec(self.GetSizeOfCode()) == 0 or self.HexToDec(self.GetSizeOfInitializedData()) == 0:
            return 0
        else:
            return self.HexToDec(self.GetSizeOfCode()) / self.HexToDec(self.GetSizeOfInitializedData())
         
    def CalculateEntropy(self, startOffset, length):
        byte_occurences = [0] * 256
     
        for offset in range(startOffset,startOffset+length):
            hexValue = self.ReadByte(offset)
            decimalValue = self.HexToDec(hexValue)
            byte_occurences[decimalValue] +=1
                
        entropy = 0
    
        for occurences in byte_occurences:
            if occurences == 0:
                continue
            frequency = occurences / length
            entropy -= frequency * math.log(frequency, 256) * 8
        return entropy
              
    def GetMachine(self):
        return self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 0, length = 2)

    def GetNumberOfSections(self):
        return self.HexToDec(self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 2, length = 2))

    def GetTimeDateStamp(self):
        return self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 4, length = 4)
    
    def GetPointerToSymbolTable(self):
        return self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 8, length = 4)
    
    def GetNumberOfSymbols(self):
        return self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 12, length = 4)
    
    def GetSizeOfOptionalHeader(self):
        return self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 16, length = 2)
    
    def GetCharacteristics(self):
        return self.ReadBigEndianBytes(self.GetCOFFHeaderOffset(), offset = 18, length = 2)

    def GetMagic(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 0, length = 2)

    def GetMajorLinkerVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 2, length = 1)

    def GetMinorLinkerVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 3, length = 1)
      
    def GetSizeOfCode(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 4, length = 4)
    
    def GetSizeOfInitializedData(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 8, length = 4)
  
    def GetSizeOfUninitializedData(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 12, length = 4)
        
    def GetAddressOfEntryPoint(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 16, length = 4)

    def GetBaseOfCode(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 20, length = 4)
    
    def GetBaseOfData(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 24, length = 4)
        
    def GetImageBase(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 28, length = 4)

    def GetSectionAlignment(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 32, length = 4)

    def GetFileAlignment(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 36, length = 4)

    def GetMajorOperatingSystemVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 40, length = 2)

    def GetMinorOperatingSystemVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 42, length = 2)

    def GetMajorImageVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 44, length = 2)

    def GetMinorImageVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 46, length = 2)

    def GetMajorSubsystemVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 48, length = 2)
        
    def GetMinorSubsystemVersion(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 50, length = 2)

    def GetWin32VersionValue(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 52, length = 4)

    def GetSizeOfImage(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 56, length = 4)

    def GetSizeOfHeaders(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 60, length = 4)

    def GetCheckSum(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 64, length = 4)

    def GetSubsystem(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 68, length = 2)

    def GetDllCharacteristics(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 70, length = 2)

    def GetSizeOfStackReserve(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 72, length = 4)

    def GetSizeOfStackCommit(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 76, length = 4)

    def GetSizeOfHeapReserve(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 80, length = 4)

    def GetSizeOfHeapCommit(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 84, length = 4)

    def GetLoaderFlags(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 88, length = 4)
    
    def GetNumberOfRvaAndSizes(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 92, length = 4)
        
    def GetExportTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 96, length = 4)
    
    def GetExportTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 100, length = 4)
    
    def GetImportTableRVA(self):
        return self.HexToDec(self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 104, length = 4))
    
    def GetImportTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 108, length = 4)
    
    def GetResourceTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 112, length = 4)

    def GetResourceTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 116, length = 4)

    def GetExceptionTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 120, length = 4)

    def GetExceptionTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 124, length = 4)

    def GetCertificateTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 128, length = 4)

    def GetCertificateTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 132, length = 4)

    def GetBaseRelocationTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 136, length = 4)

    def GetBaseRelocationTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 140, length = 4)

    def GetDebugRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 144, length = 4)

    def GetDebugSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 148, length = 4)

    def GetArchitectureRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 152, length = 4)

    def GetArchitectureSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 156, length = 4)

    def GetGlobalPtrRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 160, length = 4)

    def GetGlobalPtrSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 164, length = 4)

    def GetTLSTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 168, length = 4)

    def GetTLSTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 172, length = 4)

    def GetLoadConfigTableRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 176, length = 4)

    def GetLoadConfigTableSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 180, length = 4)

    def GetBoundImportRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 184, length = 4)

    def GetBoundImportSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 188, length = 4)

    def GetIATRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 192, length = 4)

    def GetIATSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 196, length = 4)

    def GetDelayImportDescriptorRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 200, length = 4)

    def GetDelayImportDescriptorSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 204, length = 4)

    def GetCLRRuntimeHeaderRVA(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 208, length = 4)

    def GetCLRRuntimeHeaderSize(self):
        return self.ReadBigEndianBytes(self.GetOptionalHeaderOffset(), offset = 212, length = 4)
        
    def GetSectionName(self,index):
        _bytesString = self.ReadLittleEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 0, length = 8)
        return bytearray.fromhex(_bytesString).decode()
    
    def GetSectionVirtualSize(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 8, length = 4)
        
    def GetSectionMd5(self,index):
        h = hashlib.new('md5')
        pointer = self.HexToDec(self.GetSectionPointerToRawData(index))
        length = self.HexToDec(self.GetSectionSizeOfRawData(index))
        content = self.ReadBigEndianBytes(pointer, 0, length).encode('UTF-8')
        h.update(content)
        return h.hexdigest()
        
    def GetSectionVirtualAddress(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 12, length = 4)

    def GetSectionSizeOfRawData(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 16, length = 4)

    def GetSectionPointerToRawData(self, index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 20, length = 4)

    def GetSectionPointerToRelocations(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 24, length = 4)

    def GetSectionPointerToLinenumbers(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 28, length = 4)

    def GetSectionNumberOfRelocations(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 32, length = 2)

    def GetSectionNumberOfLinenumbers(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 34, length = 2)

    def GetSectionCharacteristics(self,index):
        return self.ReadBigEndianBytes(self.GetSectionHeaderTableOffset()+ self.CalcSectionOffset(index), offset = 36, length = 4)
        
    