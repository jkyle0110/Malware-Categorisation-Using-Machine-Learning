from numpy import genfromtxt
from sklearn.decomposition import PCA, NMF
from sklearn.metrics import silhouette_samples, silhouette_score
import csv


def get_file_names():
    with open('files.csv', 'r') as files_csv:
        reader = csv.reader(files_csv)
        return list(reader)[0]


def hex_to_dec(hexString):
    return int(hexString, base=16)


def read_csv_to_numpy_array():
    data = genfromtxt('features.csv', delimiter=',')
    return data


def do_nmf(data):
    nmf = NMF(n_components=16)
    nmf.fit(data[1:])
    dataSet = nmf.transform(data[1:])
    return dataSet


def do_pca(data):
    pca = PCA(n_components=16)
    pca.fit(data[1:])
    dataSet = pca.transform(data[1:])
    return dataSet


def get_silhouette_score(cluster_labels, dataSet):
    return silhouette_score(dataSet, cluster_labels)


def calculate_detection_accuracy(labels, files):
    malLabel = 0
    benLabel = 0

    correct = 0

    if (str(files[0])[:3] == "MAL"):
        malLabel = labels[0]
        benLabel = abs(malLabel - 1)
    elif (str(files[0])[:3] == "BEN"):
        benLabel = labels[0]
        malLabel = abs(benLabel - 1)

    for i in range(len(files)):
        if (str(files[i])[:3] == "MAL" and labels[i] == malLabel):
            correct += 1

        elif (str(files[i])[:3] == "BEN" and labels[i] == benLabel):
            correct += 1

    return correct / len(files) * 100


def calculate_cluster_accuracy(labels, files):
    trojLabel = -1
    ransomLabel = -1
    adLabel = -1
    virusLabel = -1
    backDoorLabel = -1
    wormLabel = -1
    spyLabel = -1
    correct = -1

    for i in range(len(files)):
        if (str(files[i])[:3].upper() == "TRO" and trojLabel == -1):
            trojLabel = labels[i]
        if (str(files[i])[:3].upper() == "VIR" and virusLabel == -1):
            virusLabel = labels[i]
        if (str(files[i])[:3].upper() == "BAC" and backDoorLabel == -1):
            backDoorLabel = labels[i]
        if (str(files[i])[:3].upper() == "WOR" and wormLabel == -1):
            trojLabel = labels[i]
        if (str(files[i])[:3].upper() == "ADW" and adLabel == -1):
            wormLabel = labels[i]
        if (str(files[i])[:3].upper() == "SPY" and spyLabel == -1):
            spyLabel = labels[i]
        if (str(files[i])[:3].upper() == "RAN" and ransomLabel == -1):
            ransomLabel = labels[i]

    for i in range(len(files)):
        if (str(files[i])[:3] == "TRO" and labels[i] == trojLabel):
            correct += 1
        elif (str(files[i])[:3] == "VIR" and labels[i] == virusLabel):
            correct += 1
        elif (str(files[i])[:3] == "BAC" and labels[i] == backDoorLabel):
            correct += 1
        elif (str(files[i])[:3] == "WOR" and labels[i] == wormLabel):
            correct += 1
        elif (str(files[i])[:3] == "ADW" and labels[i] == adLabel):
            correct += 1
        elif (str(files[i])[:3] == "SPY" and labels[i] == spyLabel):
            correct += 1
        elif (str(files[i])[:3] == "RAN" and labels[i] == ransomLabel):
            correct += 1

    return correct / len(files) * 100


def perform_feature_extraction(pe_file):
    section_entropy = [0] * pe_file.get_number_of_sections()
    for index in range(pe_file.get_number_of_sections()):
        offset = pe_file.get_section_pointer_to_raw_data(index)
        length = pe_file.get_section_size_of_raw_data(index)
        Entropy = pe_file.calculate_entropy(hex_to_dec(offset), hex_to_dec(length))
        section_entropy[index] = Entropy

    file_entropy = pe_file.get_file_entropy()
    code_data_ratio = pe_file.get_code_data_ratio()

    #                            if(code_data_ratio != 0):
    #                                code_data_ratio = abs(math.log(code_data_ratio)) * 8
    image_version = hex_to_dec(pe_file.get_major_image_version())
    #                            if(image_version != 0):
    #                                image_version = abs(math.log(image_version)) * 8


    row = [0] * 18
    for i in range(4):
        if i >= pe_file.get_number_of_sections():
            row[i] = 0
        else:
            row[i] = section_entropy[i]
    row[4] = file_entropy
    row[5] = code_data_ratio
    row[6] = image_version
    row[7] = pe_file.get_number_of_sections()

    imports = pe_file.get_imports()
    for _import in imports:
        if _import == "KERNEL32.DLL":
            row[8] = 1
        if _import == "USER32.DLL":
            row[9] = 1
        if _import == "ADVAPI32.dll":
            row[10] = 1
        if _import == "msvcrt.dll":
            row[11] = 1
        if _import == "GDI32.dll":
            row[12] = 1
        if _import == "SHELL32.dll":
            row[13] = 1
        if _import == "ole32.dll":
            row[14] = 1
        if _import == "WS2_32.dll":
            row[15] = 1
        if _import == "SHLWAPI.dll":
            row[16] = 1
        if _import == "COMCTL32.dll":
            row[17] = 1
    return row