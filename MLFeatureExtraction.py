#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: JonKyle
"""
import os
import csv
from PEFile import PE32
from tkinter import *
from tkinter import ttk
from tkinter.filedialog import askdirectory
from numpy import genfromtxt
import numpy as np
from sklearn.decomposition import PCA
from sklearn.decomposition import NMF
from sklearn.cluster import KMeans
from sklearn.cluster import MeanShift
import pylab as pl

files = []
directory = os.curdir
KM_NUMBER_OF_CLUSTERS = 2

def HexToDec(hexString):
    return int(hexString, base=16)
    
def setBinaryPath():
    global directory
    directory = askdirectory()

def readFeaturesToNumpyArray():
    global my_data
    my_data = genfromtxt('features.csv', delimiter=',')
    for row in my_data[1:]:
        print(row)
    
def extractFeaturesToCsv():
    global files
    with open('features.csv', 'w') as csvfile:
        progressLabel.config(text = "Feature extraction in progress")
        writer = csv.writer(csvfile, quoting=csv.QUOTE_NONE)
        fieldnames = [ 'Section1Entropy','Section2Entropy','Section3Entropy','Section4Entropy','FileEntropy','CodeDataRatio','MajorImageVersion', 'NumberOfSections']
        writer.writerow(fieldnames)
        
        for filename in os.listdir(directory):
            if filename.endswith(".dll") or filename.endswith('.exe'):
                with open(directory+'/'+filename,"rb") as bufferedReader:
                    progressLabel.config(text = "Extracting Features from "+ str(filename))
                    progressLabel.update_idletasks()
                    peFile= PE32()
                    peFile.File(bufferedReader,directory+'/'+filename)
                    
                    sectionEntropy = [0] * peFile.GetNumberOfSections()
             
                    for index in range(peFile.GetNumberOfSections()):
                        Offset = peFile.GetSectionPointerToRawData(index)
                        Length = peFile.GetSectionSizeOfRawData(index)
                        Entropy = peFile.CalculateEntropy(HexToDec(Offset),HexToDec(Length))
                        sectionEntropy[index] = Entropy


                    FileEntropy = peFile.GetFileEntropy()
                    CodeDataRatio = peFile.GetCodeDataRatio()
                    
                    row = [0] * 8
                    
                    for i in range(4):
                        if i >= peFile.GetNumberOfSections():
                            row[i] = 0
                        else:
                            row[i] = sectionEntropy[i]

                    row[4] = FileEntropy
                    row[5] = CodeDataRatio
                    row[6] = HexToDec(peFile.GetMajorImageVersion())
                    row[7] = peFile.GetNumberOfSections()
                    
                    files.append(str(filename))
                    
                    writer.writerow(row)
                    
    readFeaturesToNumpyArray()
    progressLabel.config(text = "Feature extraction complete")
                                    
def doPcaAndPlot():
   global X
   pca = PCA(n_components=2)
   pca.fit(my_data[1:])
   X = pca.transform(my_data[1:])
   pl.scatter(X[:, 0], X[:, 1])
   pl.show()
   
   doKMeans()
      
def doKMeans():
    km = KMeans(n_clusters=KM_NUMBER_OF_CLUSTERS)
    km.fit(X)
    labels = km.labels_
    colors = ["g.","r.","c.","y.","b.","m."]
    cluster_centers = km.cluster_centers_
    for i in range(len(X)):
        pl.plot(X[i][0], X[i][1], colors[labels[i]], markersize = 10)
        print("Filename: "+str(files[i])+" Label: "+ str(labels[i]))
    pl.scatter(cluster_centers[:,0],cluster_centers[:,1],
            marker="x",color='k', s=150, linewidths = 5, zorder=10)

    pl.show()

top = Tk()
top.geometry('400x200')
top.title("PE Parser")

lblIO= Label(top, text="IO")
lblIO.pack(side=TOP)

browse = Button(top, width=10, text="Browse", command=setBinaryPath)
browse.pack(side = TOP)

extract = Button(top, width=10, text="Extract", command=lambda: extractFeaturesToCsv())
extract.pack(side = TOP)

lblDecomposition= Label(top, text="Decompose and Cluster")
lblDecomposition.pack()

PCAButton = Button(top,width=40, text="Decompose Data and Cluster", command=lambda: doPcaAndPlot())
PCAButton.pack(side = TOP)

progressLabel= Label(top, text="")
progressLabel.pack(side=BOTTOM)


top.mainloop()


