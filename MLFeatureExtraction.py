#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 18 12:41:19 2016

@author: JonKyle
"""
import os
import csv
from PEFile import PE32
from tkinter import *
from tkinter import ttk
from tkinter.filedialog import askdirectory
from numpy import genfromtxt
import numpy as np
from sklearn.decomposition import PCA
from sklearn.decomposition import NMF
from sklearn.cluster import KMeans
from sklearn.cluster import MeanShift
import pylab as pl
files = []

directory = os.curdir

def HexToDec(hexString):
    return int(hexString, base=16)
    
def setBinaryPath():
    global directory
    directory = askdirectory()
#    label.config(text ='Directory: '+ directory)
    
def getBinaryPath():
    return directory
    
def extractFeaturesToCsv():
    global files
    with open('features.csv', 'w') as csvfile:  
        writer = csv.writer(csvfile, quoting=csv.QUOTE_NONE)
        fieldnames = [ 'Section1Entropy','Section2Entropy','Section3Entropy','Section4Entropy','FileEntropy','CodeDataRatio','MajorImageVersion']
        writer.writerow(fieldnames)
        
        for filename in os.listdir(directory):
            if filename.endswith(".dll") or filename.endswith('.exe'):
                with open(directory+'/'+filename,"rb") as bufferedReader:
                    peFile= PE32()
                    peFile.File(bufferedReader,directory+'/'+filename)
                    
                    sectionEntropy = [0] * peFile.GetNumberOfSections()
                    sectionSize = [0] * peFile.GetNumberOfSections()
                    
                    for index in range(peFile.GetNumberOfSections()):
                        Offset = peFile.GetSectionPointerToRawData(index)
                        Length = peFile.GetSectionSizeOfRawData(index)
                        Entropy = peFile.CalculateEntropy(HexToDec(Offset),HexToDec(Length))
                        sectionEntropy[index] = Entropy


                    FileEntropy = peFile.GetFileEntropy()
                    CodeDataRatio = peFile.GetCodeDataRatio()
                    
                    row = [0] * 7
                    
                    for i in range(4):
                        if i >= peFile.GetNumberOfSections():
                            row[i] = 0
                        else:
                            row[i] = sectionEntropy[i]

                    row[4] = FileEntropy
                    row[5] = CodeDataRatio
                    row[6] = HexToDec(peFile.GetMajorImageVersion())
                    
                    files.append(str(filename))
                    
                    writer.writerow(row)
                    
                    listbox.insert(END,filename)
                    listbox.update_idletasks()
                    
def read():
    global my_data
    my_data = genfromtxt('features.csv', delimiter=',')
    for row in my_data[1:]:
        print(row)
        
        
def doPca():
   global X
   pca = PCA(n_components=2)
   pca.fit(my_data[1:])
   PCA(copy=True, n_components=2, whiten=False)
   X = pca.transform(my_data[1:])
   pl.scatter(X[:, 0], X[:, 1])
   pl.show()
   
   
def doNmf():
   global X
   nmf = NMF(n_components=2)
   nmf.fit(my_data[1:])
   NMF(n_components=2, solver='cd')
   X = nmf.transform(my_data[1:])
   pl.scatter(X[:, 0], X[:, 1])
   pl.show()
   
def doMeanShift():
    ms = MeanShift()
    ms.fit(X)
    labels = ms.labels_
    colors = ["g.","r.","c.","y."]
    cluster_centers = ms.cluster_centers_
    for i in range(len(X)):
        pl.plot(X[i][0], X[i][1], colors[labels[i]], markersize = 10)
        
    pl.scatter(cluster_centers[:,0],cluster_centers[:,1],
            marker="x",color='k', s=150, linewidths = 5, zorder=10)

    pl.show()

def doKMeans():
    km = KMeans(n_clusters=2)
    km.fit(X)
    labels = km.labels_
    colors = ["g.","r.","c.","y.","b.","m."]
    cluster_centers = km.cluster_centers_
    for i in range(len(X)):
        pl.plot(X[i][0], X[i][1], colors[labels[i]], markersize = 10)
        print("Filename: "+str(files[i])+" Label: "+ str(labels[i]))
    pl.scatter(cluster_centers[:,0],cluster_centers[:,1],
            marker="x",color='k', s=150, linewidths = 5, zorder=10)

    pl.show()

top = Tk()
top.geometry('600x800')
top.title("PE Parser")

listbox = Listbox(top, height =50)
listbox.pack(side = LEFT)

lblIO= Label(top, text="IO")
lblIO.pack(side=TOP)

browse = Button(top, width=10, text="Browse", command=setBinaryPath)
browse.pack(side = TOP)

extract = Button(top, width=10, text="Extract", command=lambda: extractFeaturesToCsv())
extract.pack(side = TOP)

readB = Button(top,width=10, text="ReadCSV", command=lambda: read())
readB.pack(side = TOP)

lblD= Label(top, text="Decomposition")
lblD.pack()

PCAB = Button(top,width=10, text="PCA", command=lambda: doPca())
PCAB.pack(side = TOP)

nmB = Button(top,width=10, text="NMF", command=lambda: doNmf())
nmB.pack(side = TOP)

lblD= Label(top, text="Plot Cluster")
lblD.pack()
msB = Button(top,width=10, text="MeanShift", command=lambda: doMeanShift())
msB.pack(side = TOP)

kmB = Button(top, width=10,text="KMeans", command=lambda: doKMeans())
kmB.pack(side = TOP)




top.mainloop()


