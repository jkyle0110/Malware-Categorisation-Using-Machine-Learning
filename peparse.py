#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: JonKyle
"""
import sys
import os
from PEFile import PE32
import subprocess
import re

def HexToDec(hexString):
    try:
        return int(hexString, base=16)
    except:
        pass
    
def DumpFileToConsole(peFile):
    
#    print('\nPE HEADER FEATURE EXTRACTION:\n')
#    print('FILENAME: ' + peFile.GetFileName()+'\n')
#    print('\nFileSize: '+ str(peFile.GetFileLength())+' bytes')
#    print('FileEntropy: ' + str(peFile.GetFileEntropy()))
#    print('CodeDataRatio: '+ str(peFile.GetCodeDataRatio()))
#    
#    print('\n***FILE HEADER***\n')
#    print('Machine: '+ peFile.GetMachine())
#    print('NumberOfSections: '+ str(peFile.GetNumberOfSections()))
#    print('TimeDateStamp: '+ peFile.GetTimeDateStamp())
#    print('PointerToSymbolTable: '+ peFile.GetPointerToSymbolTable())
#    print('NumberOfSymbols: '+ peFile.GetNumberOfSymbols())
#    print('SizeOfOptionalHeader: '+ peFile.GetSizeOfOptionalHeader())
#    print('Characteristics: '+ peFile.GetCharacteristics())
#
#    print('\n***OPTIONAL HEADER STANDARD FIELDS***\n')
#    print('Magic: '+ peFile.GetMagic())
#    print('MajorLinkerVersion: '+ peFile.GetMajorLinkerVersion())
#    print('MinorLinkerVersion: '+ peFile.GetMinorLinkerVersion())
#    print('SizeOfCode: '+ peFile.GetSizeOfCode())
#    print('SizeOfInitializedData: '+ peFile.GetSizeOfInitializedData())
#    print('SizeOfUninitializedData: '+ peFile.GetSizeOfUninitializedData())
#    print('AddressOfEntryPoint: '+ peFile.GetAddressOfEntryPoint())
#    print('BaseOfCode: '+ peFile.GetBaseOfCode())
#    print('BaseOfData: '+ peFile.GetBaseOfData())
#
#    print('\n***OPTIONAL HEADER WINDOWS SPECIFIC***\n')
#    print('ImageBase: '+ peFile.GetImageBase())
#    print('SectionAlignment: '+ peFile.GetSectionAlignment())
#    print('FileAlignment: '+ peFile.GetFileAlignment())
#    print('MajorOperatingSystemVersion: '+ peFile.GetMajorOperatingSystemVersion())
#    print('MinorOperatingSystemVersion: '+ peFile.GetMinorOperatingSystemVersion())
#    print('MajorImageVersion: '+ peFile.GetMajorImageVersion())
#    print('MinorImageVersion: '+ peFile.GetMinorImageVersion())
#    print('MajorSubsystemVersion: '+ peFile.GetMajorSubsystemVersion())
#    print('MinorSubsystemVersion: '+ peFile.GetMinorSubsystemVersion())
#    print('Win32VersionValue: '+ peFile.GetWin32VersionValue())
#    print('SizeOfImage: '+ peFile.GetSizeOfImage())
#    print('SizeOfHeaders: '+ peFile.GetSizeOfHeaders())
#    print('CheckSum: '+ peFile.GetCheckSum())
#    print('Subsystem: '+ peFile.GetSubsystem())
#    print('DllCharacteristics: '+ peFile.GetDllCharacteristics())
#    print('SizeOfStackReserve: '+ peFile.GetSizeOfStackReserve())
#    print('SizeOfStackCommit: '+ peFile.GetSizeOfStackCommit())
#    print('SizeOfHeapReserve: '+ peFile.GetSizeOfHeapReserve())
#    print('SizeOfHeapCommit: '+ peFile.GetSizeOfHeapCommit())
#    print('LoaderFlags: '+ peFile.GetLoaderFlags())
#    print('NumberOfRvaAndSizes: '+ peFile.GetNumberOfRvaAndSizes())
#
#    print('\n***OPTIONAL HEADER DATA DICTIONARIES***\n')
#    print('ExportTableRVA: '+ peFile.GetExportTableRVA())
#    print('ExportTableSize: '+ peFile.GetExportTableSize())
#    print('ImportTableRVA: '+ str(peFile.GetImportTableRVA()))
#    print('ImportTableSize: '+ peFile.GetImportTableSize())
#    print('ResourceTableRVA: '+ peFile.GetResourceTableRVA())
#    print('ResourceTableSize: '+ peFile.GetResourceTableSize())
#    print('ExceptionTableRVA: '+ peFile.GetExceptionTableRVA())
#    print('ExceptionTableSize: '+ peFile.GetExceptionTableSize())
#    print('CertificateTableRVA: '+ peFile.GetCertificateTableRVA())
#    print('CertificateTableSize: '+ peFile.GetCertificateTableSize())
#    print('BaseRelocationTableRVA: '+ peFile.GetBaseRelocationTableRVA())
#    print('BaseRelocationTableSize: '+ peFile.GetBaseRelocationTableSize())
#    print('DebugRVA: '+ peFile.GetDebugRVA())
#    print('DebugSize: '+ peFile.GetDebugSize())
#    print('ArchitectureRVA: '+ peFile.GetArchitectureRVA())
#    print('ArchitectureSize: '+ peFile.GetArchitectureSize())
#    print('GlobalPtrRVA: '+ peFile.GetGlobalPtrRVA())
#    print('GlobalPtrSize: '+ peFile.GetGlobalPtrSize())
#    print('TLSTableRVA: '+ peFile.GetTLSTableRVA())
#    print('TLSTableSize: '+ peFile.GetTLSTableSize())
#    print('LoadConfigTableRVA: '+ peFile.GetLoadConfigTableRVA())
#    print('LoadConfigTableSize: '+ peFile.GetLoadConfigTableSize())
#    print('BoundImportRVA: '+ peFile.GetBoundImportRVA())
#    print('BoundImportSize: '+ peFile.GetBoundImportSize())
#    print('IATRVA: '+ peFile.GetIATRVA())
#    print('IATSize: '+ peFile.GetIATSize())
#    print('DelayImportDescriptorRVA: '+ peFile.GetDelayImportDescriptorRVA())
#    print('DelayImportDescriptorSize: '+ peFile.GetDelayImportDescriptorSize())
#    print('CLRRuntimeHeaderRVA: '+ peFile.GetCLRRuntimeHeaderRVA())
#    print('CLRRuntimeHeaderSize: '+ peFile.GetCLRRuntimeHeaderSize())
#    
#    print('\n***SECTION HEADERS***\n')
#    for index in range(peFile.GetNumberOfSections()):
#        print("\nSECTION "+ str(index))
#        print('Section '+ str(index) + ' Name: '+ peFile.GetSectionName(index))
#        print('Section '+ str(index) + ' VirtualSize: '+ peFile.GetSectionVirtualSize(index))
#        print('Section '+ str(index) + ' VirtualAddress: '+ peFile.GetSectionVirtualAddress(index))
#        print('Section '+ str(index) + ' SizeOfRawData: '+ peFile.GetSectionSizeOfRawData(index))
#        print('Section '+ str(index) + ' PointerToRawData: '+ peFile.GetSectionPointerToRawData(index))
#        print('Section '+ str(index) + ' PointerToRelocations: '+ peFile.GetSectionPointerToRelocations(index))
#        print('Section '+ str(index) + ' PointerToLinenumbers: '+ peFile.GetSectionPointerToLinenumbers(index))
#        print('Section '+ str(index) + ' NumberOfRelocations: '+ peFile.GetSectionNumberOfRelocations(index))
#        print('Section '+ str(index) + ' NumberOfLinenumbers: '+ peFile.GetSectionNumberOfLinenumbers(index))
#        print('Section '+ str(index) + ' Characteristics: '+ peFile.GetSectionCharacteristics(index))
#        Offset = peFile.GetSectionPointerToRawData(index)
#        Length = peFile.GetSectionSizeOfRawData(index)
#        print('Section '+ str(index) + ' Entropy: '+ str(peFile.CalculateEntropy(HexToDec(Offset),HexToDec(Length))))
#        print('Section '+ str(index) + ' Md5: '+ str(peFile.GetSectionMd5(index)))


    print('\n***IMPORTS***\n')  
    
    for i in range(peFile.GetNumberOfImports()):
        print('IMPORTING: ' + peFile.GetImportName(peFile.GetImportTableRVA() + 20 * i, offset = 12))
        



        
if len(sys.argv) > 1:
    directory = sys.argv[1]
    for filename in os.listdir(directory):
        if filename.endswith(".dll") or filename.endswith('.exe'):
            with open(directory+"/"+filename,"rb") as bufferedReader:
                peFile= PE32()
                peFile.File(bufferedReader,filename)
                print(filename)
                strings = subprocess.check_output(['strings', directory+"/"+filename])
                imports = re.findall('\w+\.dll|\w+\.DLL|\w+\.EXE|\w+\.exe',strings.decode())
                print (imports)
                
